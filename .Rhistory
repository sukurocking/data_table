library(data.table)
plot(cars)
library(data.table)
class(1)
class(1L)
?class
?typeof
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
DT[2:3,]
DT[2:3] #Gives the same result as the previous code
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
DT
DT[2:3,]
DT[2:3] #Gives the same result as the previous code
class(DT)
DT[.N] #Results in the last row of DT
DT[nrow(DT)] #Gives the same result
DT[.N] #Results in the last row of DT
DT[nrow(DT)] #Gives the same result
DT[.N-2] #Third last row of DT
View(DT)
DT[, .(B, C)] #Selecting columns B and C
DT[, .log(A)] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .log(A)] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, log(A)] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .(log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, log = .(log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, loga = .(log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .(log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .(loga = log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .(loga_mynewcolumn = log(A))] #Printing a logarithmic operation on A
DT[, .(B, C)] #Selecting columns B and C
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a logarithmic operation on A
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a data table containing logarithmic operation column on A
DT[, log(5)]
DT[, .(B, C = sum(A))]
echo 10
DT[, {print 10, print 15}]
print 10
DT[, {print '10', print '15'}]
DT[, {print (10), print (15)}]
DT[, {print (10) print (15)}]
print (10)
print 10
DT[, {print(10), print(15)}]
DT[, .({print(10), print(15)})]
DT[, {print(10), print(15)}]
DT[, {print(A)
print(15) }]
DT[, {print(A)print(15) }]
DT[, {print(A) print(15) }]
DT[, {print(A)
print(15) }]
DT[, {print(10)
print(15) }]
DT[, {print(10)
print(15)}]
DT[, {print(10)
print(15)
print(25)}]
DT[, {print(10)
print(15)
print(25)
NULL}]
C
print(C)
print(C)
print(1:5)
print(1:5)
DT[, {print(10)
print(15)
print(1:5)
NULL}]
DT[, {print(10)
print(15)
print(1:5)}]
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a data table containing logarithmic operation column on A
DT[, .(B, C = sum(A))] # C is recycled
DT[, log(10)] #This results in a vector, not a data table
# Notice the syntax.. This doesn't contain our dot-paranthesis syntax
DT[, {print(10)
print(15)
print(1:5)}] #We are throwing 3 printing statements at `j`
rm(list = ls())
q()
library(data.table)
DT <- data.table(iris)
DT[,.N]
DT[, .(mean(Sepal.Length)), by = .(Species)]
DT[,mean(Sepal.Length), by = Species]
DT[,mean(Sepal.Length), Species]
DT[, .N, by = Species]
DT[, count = .N, by = Species]
DT[, .N, by = Species]
DT[, .(count = .N), by = Species]
DT[, .(count = .N), by = .(substr(Species,1,1))]
DT[, .(count = .N), by = .(Starting_with = substr(Species,1,1))]
DT[, .N, by = .(10 * round(Sepal.Length * Sepal.Width / 10))]
DT[, .(Count = .N), by = .(Area = 10 * round(Sepal.Length * Sepal.Width / 10))]
q()
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
library(data.table)
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
DT #The smaller vector is recycled
DT[2:3,]
DT[2:3] #Gives the same result as the previous code
class(DT)
DT[.N] #Results in the last row of DT
DT[nrow(DT)] #Gives the same result
DT[.N - 2] #Third last row of DT
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a data table containing logarithmic operation column on A
DT[, .(B, C = sum(A))] # C is recycled
DT[, log(10)] #This results in a vector, not a data table
DT[, {print(10)
print(15)
print(1:5)}] #We are throwing 3 printing statements at `j`
DT <- data.table(iris)
DT[,.N]
DT[, .(mean(Sepal.Length)), by = .(Species)]
DT[, mean(Sepal.Length), by = Species] #Gives the same result..
DT[, mean(Sepal.Length), Species] #The same output again
DT[, .N, by = Species]
DT[, .(count = .N), by = Species] #Same output, column name changed
DT[, .N, by = .(10 * round(Sepal.Length * Sepal.Width / 10))]
DT[, .(Count = .N), by = .(Area = 10 * round(Sepal.Length * Sepal.Width / 10))] # Naming the columns
?`:=`
# Chunk 1
library(data.table)
# Chunk 2
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
DT #The smaller vector is recycled
DT[2:3,]
DT[2:3] #Gives the same result as the previous code
# Chunk 3
class(DT)
# Chunk 4
DT[.N] #Results in the last row of DT
DT[nrow(DT)] #Gives the same result
DT[.N - 2] #Third last row of DT
# Chunk 5
DT[, .(B, C)] #Selecting columns B and C
# Chunk 6
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a data table containing logarithmic operation column on A
DT[, .(B, C = sum(A))] # C is recycled
DT[, log(10)] #This results in a vector, not a data table
# Notice the syntax.. This doesn't contain our dot-paranthesis syntax
DT[, {print(10)
print(15)
print(1:5)}] #We are throwing 3 printing statements at `j`
# Chunk 7
DT <- data.table(iris)
DT[,.N]
# Chunk 8
DT[, .(mean(Sepal.Length)), by = .(Species)]
DT[, mean(Sepal.Length), by = Species] #Gives the same result..
# Notice the syntax.. we have skipped the dot-paranthesis syntax
# This can be done if there is only one argument for 'j' and 'by'
DT[, mean(Sepal.Length), Species] #The same output again
# Chunk 9
DT[, .N, by = Species]
DT[, .(count = .N), by = Species] #Same output, column name changed
# Now we will use an expression in 'by'
DT[, .(count = .N), by = .(Starting_with = substr(Species,1,1))]
# Chunk 10
DT[, .N, by = .(10 * round(Sepal.Length * Sepal.Width / 10))]
DT[, .(Count = .N), by = .(Area = 10 * round(Sepal.Length * Sepal.Width / 10))] # Naming the columns
# Chunk 11
DT[, .(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Width = mean(Petal.Width),
Petal.Length = mean(Petal.Length)
), by = Species][order(Species)]
# This calculates the mean of each of the columns, grouped by Species
# Chunk 12
DT[, lapply(.SD, mean), by = Species]
# Chunk 13
DT[, lapply(.SD,mean), by = Species, .SDcols = "Sepal.Length"]
# OR
DT[, lapply(.SD, mean), by = Species, .SDcols = 1]
# Apply mean for those columns starting with Petal
DT[, lapply(.SD, mean), by = Species, .SDcols = grep("Petal", colnames(DT))]
View(DT)
library(data.table)
DT[,c("Sepal.Length", "Sepal.Width") := NULL] # Deleting 2 columns
View(DT)
DT[,Petal.Width := NULL] # Shorthand for deleting a column
DT
View(DT)
DT1 <- DT
DT1[, Species:= c('a','b','c')]
DT1
DT[,Species:= c("a","b","c")] # Recycling vector ("a","b","c") in the 2nd column
DT
DT1
DT1[, c("Petal.Length", "Species") = c(1:150, 50:200)]
DT1[, c("Petal.Length", "Species") := c(1:150, 50:200)]
warnings()
View(DT1)
DT1[, c("Petal.Length", "Species") := list(1:150, 50:200)]
warnings()
DT1[, c("Petal.Length", "Species") := list(1:150, 51:200)]
DT1
DT[, c(Petal.Length, Species) := list(1:150, 51:200)]
DT
DT[, c("Petal.Length", "Species") := list(1:150, 51:200)]
DT
DT[, `:=`(Petal.Length := NULL, Species := 61 - 210)]
DT[, `:=`(Petal.Length = NULL, Species = 61:210)]
DT
DT <- data.table(iris)
View(DT)
Petal.Length <- rnorm(150)
DT1 <- DT
DT1[Sepal.Length]
DT1["Sepal.Length"]
DT1[Sepal.Length > 0]
DT1[Sepal.Length > mean(Sepal.Length)]
DT1[max(Sepal.Length)]
DT1[max("Sepal.Length")]
max(Petal.Length)
max(DT1$Petal.Length)
DT1[max(Petal.Length)]
max(DT1$Sepal.Length)
DT1[Sepal.Length==max(Sepal.Length)]
DT1[Sepal.Length== 5.4]
which(DT1$Sepal.Length == 5.4 && DT1$Sepal.Length == 3.8)
which(DT1$Sepal.Length == 5.4 && DT1$Sepal.Width == 3.8)
which(DT1$Sepal.Length == 5.4 && DT1$Sepal.Width == 3.9)
DT[,.N,by = .(Sepal.Length)]
DT[Species=="setosa",.N,by = .(Sepal.Length)]
which(DT1$Sepal.Length == 5.4 && DT1$Sepal.Width == 3.9)
with(DT, which(Sepal.Length == 5.4 && Sepal.Width == 3.9))
which(D1$Sepal.Length == 5.4 && D1$Sepal.Width == 3.9)
which(DT1$Sepal.Length == 5.4 && DT1$Sepal.Width == 3.9)
DT1[Species=="setosa",.N,by = .(Sepal.Length)]
which(DT1$Sepal.Length == 5.4)
DT1[Petal.Length==max(Petal.Length)]
max(DT1$Sepal.Length)
max(Petal.Length)
max(DT1$Petal.Length)
DT1[Petal.Length==max(Petal.Length)]
DT
for (j in 1:2) {
set(DT, i = sample(150, 3), j = j, NA)
}
rm(j)
DT
DT[Sepal.Length==NA]
DT[is.na(Sepal.Length)]
DT[Sepal.Length>5]
DT[Sepal.Length>7]
setnames(DT, old = colnames(DT), new = gsub("Sepal.","",colnames(DT)))
DT
setcolorder(DT, neworder = c("Species", 1,2,3,4))
setcolorder(DT, neworder = c("Species", "Length", "Width", "Petal.Length", "Petal.Width"))
DT
DT["Species"]
setkey(DT, "Species")
DT
set.seed(100)
x <- data.table(letter = sample(letters[1:10],50, replace = TRUE), number = sample(10, 50, replace = TRUE))
x <- data.table(letter = sample(letters[1:10],50, replace = TRUE), number = sample(10, 50, replace = TRUE), logical = c(TRUE,FALSE))
x
setkey(x, "letter"); x #After setting "letter" column as key
x["a"]
x["number"]
x[,"number"]
x # Before setting keys
rm(list = ls())
x <- data.table(letter = sample(letters[1:10],50, replace = TRUE), number = sample(10, 50, replace = TRUE), logical = c(TRUE,FALSE))
# Chunk 1
library(data.table)
# Chunk 2
DT <- data.table(A = 1:5, B = c('a', 'b', 'c', 'd', 'e'), C = TRUE)
DT #The smaller vector is recycled
DT[2:3,]
DT[2:3] #Gives the same result as the previous code
# Chunk 3
class(DT)
# Chunk 4
DT[.N] #Results in the last row of DT
DT[nrow(DT)] #Gives the same result
DT[.N - 2] #Third last row of DT
# Chunk 5
DT[, .(B, C)] #Selecting columns B and C
# Chunk 6
DT[, .(A, B, C, loga_mynewcolumn = log(A))] #Printing a data table containing logarithmic operation column on A
DT[, .(B, C = sum(A))] # C is recycled
DT[, log(10)] #This results in a vector, not a data table
# Notice the syntax.. This doesn't contain our dot-paranthesis syntax
DT[, {print(10)
print(15)
print(1:5)}] #We are throwing 3 printing statements at `j`
# Chunk 7
DT <- data.table(iris)
DT[,.N]
# Chunk 8
DT[, .(mean(Sepal.Length)), by = .(Species)]
DT[, mean(Sepal.Length), by = Species] #Gives the same result..
# Notice the syntax.. we have skipped the dot-paranthesis syntax
# This can be done if there is only one argument for 'j' and 'by'
DT[, mean(Sepal.Length), Species] #The same output again
# Chunk 9
DT[, .N, by = Species]
DT[, .(count = .N), by = Species] #Same output, column name changed
# Now we will use an expression in 'by'
DT[, .(count = .N), by = .(Starting_with = substr(Species,1,1))]
# Chunk 10
DT[, .N, by = .(10 * round(Sepal.Length * Sepal.Width / 10))]
DT[, .(Count = .N), by = .(Area = 10 * round(Sepal.Length * Sepal.Width / 10))] # Naming the columns
# Chunk 11
DT[, .(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Width = mean(Petal.Width),
Petal.Length = mean(Petal.Length)
), by = Species][order(Species)]
# This calculates the mean of each of the columns, grouped by Species
# Chunk 12
DT[, lapply(.SD, mean), by = Species]
# Chunk 13
DT[, lapply(.SD,mean), by = Species, .SDcols = "Sepal.Length"]
# OR
DT[, lapply(.SD, mean), by = Species, .SDcols = 1]
# Apply mean for those columns starting with Petal
DT[, lapply(.SD, mean), by = Species, .SDcols = grep("Petal", colnames(DT))]
# Chunk 14
DT[,c("Sepal.Length", "Sepal.Width") := NULL] # Deleting 2 columns
DT[,Petal.Width := NULL] # Shorthand for deleting a column
DT
# Chunk 15
DT[, Species := c("a", "b", "c")] # Recycling vector ("a","b","c") in the 2nd column
DT
DT[, c("Petal.Length", "Species") := list(1:150, 51:200)] # Modifying 2 columns at once
DT
# Chunk 16
DT[, `:=`(Petal.Length = NULL, Species = 61:210)]
DT
# Chunk 17
DT <- data.table(iris)
# Chunk 18
for (j in 1:2) {
set(DT, i = sample(150, 3), j = j, NA)
}
rm(j)
DT[is.na(Sepal.Length)] # Indexing of rows (in the `i` part)
DT[Sepal.Length>7]
# Chunk 19
# Changing column names starting from Sepal. to "".. Removing the "Sepal." prefix
setnames(DT, old = colnames(DT), new = gsub("Sepal.","",colnames(DT)))
DT #Now look at our data table
setcolorder(DT, neworder = c("Species", "Length", "Width", "Petal.Length", "Petal.Width"))
DT
# Chunk 20
setkey(DT, "Species")
DT
set.seed(100)
x <- data.table(letter = sample(letters[1:10],50, replace = TRUE), number = sample(10, 50, replace = TRUE), logical = c(TRUE,FALSE))
x # Before setting keys
setkey(x, "letter"); x #After setting "letter" column as key
x["a"] # Automatic indexing happens (only for single variable names)
x[,"number"]
x1 <- x
x1
setcolorder(x1, c("letter", "number", "logical"))
x1
setcolorder(x1, c( "number","letter", "logical"))
x1
x1["a"]
x1
x1[1]
x1["b"]
x1["d"]
x1[,letter:= sample(letters[1:6],10)]
x1[,letter:= sample(letters[1:6],10, replace = TRUE)]
x1
x1["d"]
x1["a"]
setkey(x1, "letter")
x1["a"]
x1["b"]
x1["FALSE"]
setkey(x1,"number")
x1[5]
x1
x1["5"]
x1["f"]
setkey(x1, "letter")
x1["f"]
DT[c(.N - 1, .N), ] #2nd last and last rows
DT[.N - 1:.N, ] #This apparently prints all the rows in reverse order except last row
DT[nrow(DT) - 1:nrow(DT), ] #This prints the same too
nrow(DT)
DT[.N - 1] #2nd last row
DT[5:6,] #But this prints the last 2 rows or rather 5th to 6th rows
